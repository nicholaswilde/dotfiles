---
version: '3'

vars:
  VER: '2.5'
  STOW_ARGS: '-v --adopt -t ~/'
  
tasks:
  gpro:
    desc: Run gemini with gemini-2.5-pro model
    cmds:
      - gemini -m gemini-{{ .VER }}-pro
  gflash:
    desc: Run gemini with flash model
    cmds:
      - gemini -m gemini-{{ .VER }}-flash
  glite:
    desc: Run gemini with lite model
    cmds:
      - gemini -m gemini-{{ .VER }}-lite
  bootstrap:
    desc: Bootstrap dotfiles
    cmds:
      - task: decrypt
      - task: install
  decrypt:
    desc: Decrypt .env using SOPS
    preconditions:
      - test -f ./bash/.tokens.enc
    cmds:
      - sops -d --input-type dotenv --output-type dotenv ./bash/.tokens.enc > ./bash/.tokens
  encrypt:
    desc: Encrypt .env using SOPS
    preconditions:
      - test -f ./bash/.tokens
    cmds:
      - sops -e --input-type dotenv --output-type dotenv ./bash/.tokens > ./bash/.tokens.enc
  deps:
    desc: Install dependencies
    cmds:
      - sudo apt install -y stow
  test:
    desc: Stow each dotfile folder individually
    cmds:
      - for d in */; do if [[ "$d" != ".git/" && "$d" != ".github/" ]]; then stow -n {{ .STOW_ARGS }} "${d%/}"; fi; done
  install:
    desc: Stow each dotfile folder individually
    cmds:
      - for d in */; do if [[ "$d" != ".git/" && "$d" != ".github/" ]]; then stow {{ .STOW_ARGS }} "${d%/}"; git restore "${d%/}"; fi; done
  restow:
    desc: Restow each dotfile folder individually
    cmds:
      - for d in */; do if [[ "$d" != ".git/" && "$d" != ".github/" ]]; then stow -R {{ .STOW_ARGS }} "${d%/}"; git restore "${d%/}";fi; done
  delete:
    desc: Delete each dotfile folder individually
    cmds:
      - for d in */; do if [[ "$d" != ".git/" && "$d" != ".github/" ]]; then stow -D {{ .STOW_ARGS }} "${d%/}"; fi; done
  unstow:
    desc: Run the unstow.sh script to remove stowed files from the home directory
    cmds:
      - ./unstow.sh
  create-ignore:
    desc: Create a .stow-local-ignore file in a stow package folder
    preconditions:
      - sh: 'test -n "{{.CLI_ARGS}}"'
        msg: "Stow package name not specified. Usage: task create-ignore <stow package name>"
      - sh: 'test -d "{{.CLI_ARGS}}"'
        msg: "Directory {{.CLI_ARGS}} not found"
    cmds:
      - touch {{.CLI_ARGS}}/.stow-local-ignore
  nuke:
    desc: Nuke existing files
    cmds:
      - rm ~/.config/micro/settings.json
      - rm ~/.config/gh/config.yml
      - rm ~/.gemini/HOMELAB.md
      - rm ~/.config/gh/config.yml
  default:
    cmds:
      - task -l
    silent: true
