#!/bin/bash

# kubectl
if command_exists kubectl; then
  # shellcheck source=/dev/null
  source <(kubectl completion bash)
  complete -F __start_kubectl k
fi

# gh
if command_exists gh; then
  eval "$(gh completion -s bash)"
fi

if command_exists tk; then
  complete -C /usr/local/bin/tk tk
fi

if command_exists kcompose; then
  # Bash (add to .bashrc for persistence)
  # shellcheck source=/dev/null
  source <(kompose completion bash)
fi

if command_exists flux; then
  # shellcheck source=/dev/null
  . <(flux completion bash)
fi

if command_exists rbenv; then
  eval "$(rbenv init -)"
fi

if [ -f "${HOME}/.cargo/env" ]; then
  # shellcheck source=/dev/null
  source "${HOME}/.cargo/env"
fi

if command_exists pip; then
  # shellcheck source=/dev/null
  . <(pip completion --bash)
fi

if command_exists direnv; then
  eval "$(direnv hook bash)"
fi

if command_exists brew; then
  v="$(brew --prefix)/bin/brew" && [[ -r "$v" ]] && eval "$($v shellenv)" 
  unset v
fi

if command_exists mc; then
  v="$(which mc)" && [[ -r "$v" ]] && complete -C "${v}" mc
fi

if command_exists direnv; then
  eval "$(direnv hook bash)"
fi

if command_exists "gh copilot"; then
  eval "$(gh copilot alias -- bash)"
fi

_mk_completion() {
    local IFS=$'
'
    COMPREPLY=( $( env COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   _MK_COMPLETE=complete_bash $1 ) )
    return 0
}

if command_exists mk; then
  complete -o default -F _mk_completion mk
fi

# Check if gh is installed AND the copilot extension is available
if command_exists gh && gh copilot --help &> /dev/null; then
  eval "$(gh copilot alias -- bash)"
fi

if command_exists bat; then
  eval "$(bat --completion bash)"
fi
